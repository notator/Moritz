
Revision 58 Log
ACHTUNG:
AT THE END OF THIS REVISION, THE ONLY SCORES HAVING THE CORRECT FORMAT ARE THOSE IN THE SCORES FOLDER.
OTHER SCORES WILL NOT LOAD CORRECTLY. TO RUN EARLIER SCORES, USE AN EARLIER VERSION OF MORITZ:
FINAL MORITZ VERSION SUPPORTING CAPELLA: Moritz_58.20!
================================================================================================================

TODO (Moritz 07.07.2012):
I'm not sure about going public with Moritz C# code any more. Maybe better to think everything through again
in Javascript.
Javascript projects include:
	-- Related to Assistant Composer:
		oo	Transcription of standard midi files. Except for barlines, this is probably quite easy to do. See the
			Song6Algorithm. First load the durations, then add barlines. Use the Assistant Composer Dialog.
			Investigate and probably use the Google Closure Library (https://developers.google.com/closure/library/?hl=de)
			xx	Performance of standard midi files using the AssistantPerformer:
				The file MoritzPerformanceOptions.cs contains the following constructor:
				MoritzPerformanceOptions(Multimedia.Midi.Sequence sequence, string moritzOptionsPathname).
				This is not currently used, but it seems to be intended for live performance of simple MIDI files...
				Maybe delete it.
		oo	It would be nice to extend 2b2 notation to accept lyrics (See Song 6 - 2b2 notation). This would mean
			deriving Study2b2ChordMetrics from GroupMetrics, and adding the lyric metrics before calling
			Study2b2ChordSymbol.WriteSVG() (See ChordMetrics for an analogy.)
		oo	Can beams be made to cross system boundaries? I think this would be rather difficult, and is probably
			not worth the effort. 

	-- Related to Assistant Performer:
		oo	Homophonic MIDI input devices (EWI). Maybe do this in C# (--> open source Silverlight plugin?)
			Think about continuous control types. Extend the Keyboard Settings dialog?
		oo	Write javascript code for reading midiChord data when the corresponding graphic object is clicked.

	-- Start work on Song 6 again.
		oo	Think about the structure, and about using MidiDefLists and MidiMelodyBlocks (see below).
			MidiDefLists (which already exist as a class) could be constucted by rotating and otherwise 
			deforming other MidiDefLists (transpositions etc.). Think in terms of foreground/background 
			(see notebook). I think I should stick with one midiChannel per voice, so all the chords in a 
			MidiDefList will always have the same channel. Multichannel MidiDefLists would get too 
			complicated. But there could be a higher level MidiMelodyBlock class containing parallel 
			MidiDefLists. Such a class could define appropriate functions for adjusting the contained 
			MidiDefLists...
		oo	Complete the krystals and palettes by copying birdsong audio files, and maybe other audio files
			such as recorded syllables from the Song 6 text. Possibly use slowed-down audio samples, speeding 
			up the midi by shortening the overall duration later.
		oo	Finalize Clytemnestra's pitches.

==============================================================================================================

27.06.2012 rev58.194
Final revision in rev 58 series. This version (Moritz2) is now documented on my website.
Changed _ppqn back to 240 in MidiFileCreator. [_ppqn = 5760 (i.e. 24 * 240) would be 1 microsecond per Clock.]
In SVG files:
  1. changed id of score:object="system" to use '_' character instead of a space. (SvgSystem.WriteSVG())
  2. changed id of score:object="staff" to use '_' characters instead of spaces.  (Staff.WriteSVG())
These ids are not used by the Assistant Performer, but they *are* used by the new Javascript MidiPlayer.
Minor correction to Moritz' About dialog.

24.06.2012 rev58.193
Finally got Scores displaying in Firefox. In response to an answer at the SVG forum, I have removed "www." from all
the URLs having to do SVG files and fonts:
Moritz now writes the fontsStyleSheet's address as https://james-ingram-act-two.de/fontsStyleSheet.css
in both SvgScore.WriteHTMLScoreHead() and SvgPage.WriteSvgPageHeader().
The @font-face file on my website no longer uses 'www.' either. It now contains:
	/*---------------------------------------------------------------------*/
	@font-face {
		font-family: 'CLicht';
		src: url('https://james-ingram-act-two.de/fonts/clicht_plain-webfont.eot'); /* IE9 Compat Modes */	
		src: url('https://james-ingram-act-two.de/fonts/clicht_plain-webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
		url('https://james-ingram-act-two.de/fonts/clicht_plain-webfont.woff') format('woff'), /* Modern Browsers */ 
		url('https://james-ingram-act-two.de/fonts/clicht_plain-webfont.ttf') format('truetype'), /* Safari, Android, iOS */ 
		url('https://james-ingram-act-two.de/fonts/clicht_plain-webfont.svg#webfontl9D2oOyX') format('svg'); /* Legacy iOS */
		font-weight: normal;
		font-style: normal;
	}

	.CLicht {
		font-weight: normal;
		font-style: normal;
		line-height: normal;
		font-family: 'CLicht';
	}
	/*---------------------------------------------------------------------*/

22.06.2012 rev58.192
Changed _ppqn to 2400 in MidiFileCreator.

13.06.2012 rev58.191
Changes made while working on the user interface of my new Javascript MIDI Player.
Each System in the score now contains a 'markers' group containing three markers: startMarker, runningMarker and
endMarker. The parameters for these are set in Javascript.

11.06.2012 rev58.190
Changes made while working on the user interface of my new Javascript MIDI Player.
1. The frame element in SvgPages now has a white fill. This allows the frames to receive mouse-clicks.
2. An alignmentX value is now stored as an attribute of score:chord and score:rest elements. This allows the
chord and rest symbols to be identified relative to the position of a mouse-click.

29.05.2012 rev58.189
class attribute now added to embedded SVG pages in HTML score.
Recompiled all scores in D:Moritz

15.05.2012 rev58.188
Correction: Rests are now saved in palette definitions!
Also corrected SvgExtensions doc on website.

26.03.2012 rev58.187
Changed PaletteForm layout: moved all envelope fields together.

21.03.2012 rev58.186
Redesigned MoritzForm1. Added Buttons for Krystals Editor and About. Revised About dialog. Revised Preferences
dialog.

13.03.2012 rev58.185
SvgScore.SaveSvgScore(): WriteLinkAndMP3Player() is now called even if there is no recording set in _pageFormat.
Created new demo scores (and recordings) for Study 2c.

12.03.2012 rev58.184
Bug fixes: Moritz now writes files and performs them correctly with and without <use>/midiDefs.
The <use> element is not overridden by attributes or content. Corrected the website documentation. 

12.03.2012 rev58.183
The score:sliders element is optional inside score:midichord elements because MidiChordDef.MidiChordSliderDefs
is optional (can be null). Made appropriate changes to MidiChordDef(MidiChordDef, MsDuration) and
MidiChordDef.WriteSVG(). Corrected website documentation.


08.03.2012 rev58.182
Moved common code for TopEdge.YatX() and BottomEdge.YatX() into the base class HorizontalEdge.
Created all the test scores again.
TODO: Proofread all the test files. Be satisfied that no further tests are necessary.
 
07.03.2012 rev58.181
If a cautionary notehead now happens at the beginning of a staff (it is the continuation of a chord on the
corresponding staff in the previous system) it now has a preceding noteheadExtender.
Debugged TopEdge.AddLineToUpperEdge(HLine newLine), TopEdge.YatX() and BottomEdge.YatX() so that lines are now
really added correctly.

06.03.2012 rev58.180
In SvgPage.WriteSvgPageHeader() moved xmlns score to
https://www.james-ingram-act-two.de/open-source/svgScoreExtensions.html

06.03.2012 rev58.179
The "chord", "midi" and "graphics" elements associated with ChordSymbols are now saved with three ids having 
the same number. For example, if the outer group has id="chord357", then the contained score:midiChord will 
have id="midi357" and the contained graphics group will have id="graphics357".
The same is true for cautionary chords, except that these never have midi info. If the outer group has
id="cautionaryChord572", then the contained graphics group has id="graphics572".

04.03.2012 rev58.178
Moved the sliders begin..end elements lines from MidiChordSliderDef.WriteSVG() into MidiChordDef.Write().
This makes the structure more obvious.

29.02.2012 rev58.177
Bug Fixed: Speed changes in AssistantPerformer now work correctly, with ornaments spread correctly over the
altered total duration. In MidiScore.GetMidiChannelMoments(), a clone of the MidiChordDef is made with the
correct msPosition and msDuration _before_ creating the midiChord. The clone is made so that the values in
the original MidiChordDef don't change, and can be used to calculate other speeds when initiating new
performances in the AssistantPerformer.

29.02.2012 rev58.176
A series of bug fixes discovered while trying to solve chordOff problems (chordOffs were/are not being sent
after ~6). I've come to the conclusion that the failure to react to chordOffs has to do with the sound
definitions in the Microsoft GS wavetable Synth. But the bugs were worth correcting anyway.
Bug Fix 1: In PerformanceState.SendPendingMessagesUpdateState(): added code inside lock(pendingChordOffs).
ChordOffs seem not to have been being sent at all!...
Bug Fix 2: In the MidiChord constructor: chordOff construction has been recoded. Currently, the assistant sends
queued ChordOffs only once per moment, so there is no point in trying to stop notes inside ornaments.
(This behaviour might change in future for slow ornaments...) Behaviour is now as follows: ChordOffs are never
sent inside ornaments, but if the outer MidiChord HasChordOff, all its pitches, including the those sent during
an ornament which HaveChordOff, are sent a noteOff at the end of the outer MidiChord. If a pitch repeats during
an ornament, it is only sent one chordOff (at the end of the MidiChord).
Bug Fix 3: In BasicMidiChordDef(XmlReader r) and MidiChordDef(XmlReader r), fixed the code for hasChordOff.
This attribute is true by default, so if there is a hasChordOff="0" entry in the SVG file, then HasChordOff is
false.

28.02.2012 rev58.175
Bug Fix: Chords are now really being multiplied correctly by ornaments!
This was fairly complicated, but the main fix was in UniqueMidiRestDef.DoTranspositionAndVelocities().
Bank and patch values in the ornaments palette are now truly optional. If they exist, they override the values
in the main palette. In Study 2c, ornament banks and patches are not overridden (the fields are empty).
 
27.02.2012 rev58.174
Cosmetic changes to AssistantComposer and AssistantPerformer forms.

27.02.2012 rev58.173
Finished revising preferences usage.
Deleted the Flash player folder (now using the online version).
Renamed _user files -> examples, and added a README.txt file explaining that these folders should be copied to
the user's local moritz folder (which can be set in preferences) if they are to be used. This means that users
can now create their own files without them having to be part of the main repository. The files in my local
moritz folder will be copied to repository/examples.

25.02.2012 rev58.172
1. Removed the Sanford Multimedia.Midi project again (see rev.171). There is now a 'Sanford Libraries' folder
(inside Moritz' solution folder) containing Multimedia.dll, Multimedia.Midi.dll and a README.txt containing
the copyright notice and notes about the various Toolkit versions. Moritz' projects refer to these .dlls.
This should make keeping a Tortoise repository simpler. The full V4 Toolkit code can be added on demand.
2. Moved the XMLSchemas folder online to https://james-ingram-act-two.de/moritz/XMLSchemas. That's the best 
place for it! removed it from Preferences and from the "_user files" folder.

25.02.2012 rev58.171
1. Reorganized the content of the Moritz solution folder (containing the Moritz project folder).
	a) Removed all 'font' directories, since CLicht is now always loaded from my website.
	b) Removed the global 'midi' folder, and added a 'midi' folder inside each algorithm folder.
	   Midi files are now saved in these folders by default.
	c) Updated Preferences class accordingly.
	d) Updated Song 6, so that it finds its midi input.
2. Moved the whole of the Sanford Multimedia.Midi (V4) project inside Moritz (including the source code). Deleted
the "Sanford Libraries" folder, which only included the .dlls. Updated all references to "Multimedia" and
"Multimedia.Midi".
NOTE: I have commented out the AssertValid() call at the end of the function:
  Multimedia.Midi.Sequencing.TrackClasses.Track.cs.Insert(int position, IMidiMessage message)
This was originally done on Leslie Sanford's advice in August 2007 to avoid long waits while loading files.
While integrating the Sanford Libraries into Moritz (23.11.2011), I discovered that (without stopping or 
otherwise affecting the performance) this assertion could fail while Moritz was playing very fast notes.
The assertion simply seems not to matter, so I've commented it out again. Dangerous maybe, but effective! :-)

24.02.2012 rev58.170
Bug Fix: Study 2c1 no longer crashes when minimum crotchet duration == 100. When aligning synchronous chords,
the alignment chord's stem is needed, no matter which duration class it has, so a dummy stem is created
using crotchet noteheads at the same alignment positions as the existing noteheads. This is done in a new
function ChordMetrics.DummyStemMetrics() which calls a new constructor: HeadMetrics(HeadMetrics, DurationClass).

24.02.2012 rev58.169
Bug Fix: Debug composing Study 2c1 with duration == 200 no longer leads to stems being constructed wrongly.
Fixed in ChordMetrics.AdjustStemLengthAndFlagBlock().

24.02.2012 rev58.168
Bug Fix: Expression envelopes are now performed. "expressionSlider" was not being read correctly in the
MidiChordSliderDefs constructor.

24.02.2012 rev58.167
Dots are now allowed in score titles (e.g. Study 2c2.1). By convention, a "b" is used in scores which use
Study2b2 symbols (e.g. Study 2c1b) In the test scores, the number before the dot or letter denotes the number
of staves per system in the score.

24.02.2012 rev58.166
Bug Fix: in Study 2c2 (1:0, 2)(t,t3), symbols were overlapping in top staff.
Reprogrammed/reorganised SvgSystem.JusitifyHorizontally().
Created and renamed test scores as follows:
Study 2c2.1 ((0, 2:1)(t,t2)) is okay
Study 2c2.2 ((2, 1:0)(t,t3)) is okay
Study 2c3 ((1:0) (t)) is okay...

22.02.2012 rev58.165
Study 2b2 symbols are now displayed on any number of staves: The symbol type rotates as the number of staves
increases. Staff 4 has the same symbols as staff 1, staff 5 has the same symbols as staff 2, etc.
Study 2b2 symbols on staves 2, 5, 8, 11 etc. are displayed as if on two octaves. MidiPitch 72 is displayed at 
the lowest position on the staff, midiPitch 84 is displayed just above midiPitch 83. This can be seen working 
on staff 2 of Study 2c1b: the first chord is an "octave lower" than the third to last chord in bar 2. Both 
chords use symbol 12 (lowest pitch is B-natural).
All test scores are now working.

16.02.2012 rev58.164
Slightly widened 2b2 symbols because they were overlapping in Study 3b tests.
StandardSymbolSet.AlignLyrics(): If the lyrics are below the staff, they can be no closer than 1.5 gaps from
the bottom staffline.
All test scores are now working.

16.02.2012 rev58.163
Made the functions in SvgSystem.MakeGraphics() which are only called if SymbolSet is "standard" into empty
virtual functions in SymbolSet. These are overridden by the StandardSymbolSet. The functions are:
AdjustRestsVertically(), AlignLyrics() and AddNoteheadExtenderLines().
All test scores are now working.

16.02.2012 rev58.162
Restricted 2b2 chordSymbols to scores with a maximum of 3 staves per system.
If there is only one staffline, semibreve and breve rests are now moved down onto (below) it.

16.02.2012 rev58.161
Restricted multi-voice staves to the StandardSymbolSet in AssistantComposerMainForm. 

16.02.2012 rev58.160
Bug Fix: DimensionsAndMetadataForm.Text is now initialized in the AssistantComposerMainForm constructor.
Also, the name of the algorithm is now dislayed on the "QuitAlgorithmButton".
 
16.02.2012 rev58.159
Created test scores for Study2b2Symbols by cloning the existing test files and adding a 'b' to their names.
Study 2c1b now displays correctly.

15.02.2012 rev58.158
Cleaned up the code in rev58.157 and improved its documentation. Works for all test files.

15.02.2012 rev58.157
Study 2c2 ((0, 2:1)(t,t2)):
Fixed an old Bug: Horizontal Justification now works correctly in all test files. (The last moment on each system
used to look particularly wrong.) Fixed by making several major changes to SvgSystem.RedistributeMoments().
In particular, added a new function WidthFactors() which collects the width change factors for each moment in a 
system.

14.02.2012 rev58.156
Study 2c2 ((0, 2:1)(t,t2)):
Bug Fix: The barlines between the two staves were not always long enough.
Rewrote Edge.AddLineToUpperEdge() with a new algorithm. Very subtle, but I think better now.
Barlines are now correct in all other test files too.

08.02.2012 rev58.155
Bug Fix: There are no longer any collisions in the top staff. 
The fix was in SvgSystem.JustifyHorizontally(): The do..while clause is now outside the foreach staff block.
Study 2c1 ((0,1,2)(t,t2,t3)) now okay.
 
08.02.2012 rev58.154
Finished revising the existence and positions of accidentals on two part chords. This was more work than I'd 
bargained for, but I'm now happy with the result.
a) StandardSymbolSet.ForceNaturalsInSynchronousChords(Staff staff): Naturals are now forced in the StandardSymbolSet
   if chords are synchronous in 2-Voice staves, and a common diatonic notehead in the other chord is sharp or flat.
b) Bug Fix: If a forced natural is now created on a synchronous chord, it is now created on the proper notehead!
   Noteheads are now stored top-down inside chord symbols. ChordSymbol.Heads renamed to ChordSymbol.HeadsTopDown.
c) Finally sorted accidentals so that they appear in the order they would have on a single chord.
   See ChordMetrics.AdjustAccidentalsForTwoChords()

03.02.2012 rev58.153
Collisions were occurring because beamed stem lengths were not close enough to their final positions before
calling JustifyHorizontally(). Corrected this by calling SetBeamedStemLengths() before JustifyHorizontally().
SetBeamedStemLengths() calls FinalizeBeamBlocks() while the chords are still distributed proportionally inside
each bar, and then deletes the beams which are created. FinalizeBeamBlocks() is called again after justifying
horizontally. Deleted the previous function which set stem lengths. Updated the comments on the various 
functions.

02.02.2012 rev58.152
Added a further stem position  in Staff.AdjustLowerChordXPosition(). (Hairline right of a right-shifted 
notehead in the top chord.)

01.02.2012 rev58.151
Bug fix: BeamBlock.SetToStaff() revised so that beams which ought to be on a staff always touch the central 
line of that staff.

01.02.2012 rev58.150
Revised Staff.AdjustLowerChordXPosition() thoroughly. No known bugs there now.

31.01.2012 rev58.149
Bug Fix: stem lengths were wrong on synchronous, beamless chords.

30.01.2012 rev58.148
In SvgSystem.AdjustStemHeights() stem tips which belong to beams are now all moved to the same height.
 
30.01.2012 rev58.147
SvgSystem.JustifyHorizontally() now corrects collisions per staff as follows:
a) corrects collisions in the top voice, then
b) if there is a second voice, corrects collisions in the second voice and then corrects collisions between the voices.

30.01.2012 rev58.146
Tested and fixed stem positions where there are synchronous chords in 2-Voice staves.
Added new function: HeadMetrics.OverlapsHead(HeadMetrics).
This file (Study 2c3 (1:0) (t2)) is currently exhibiting some more bugs...

30.01.2012 rev58.145
Study 2c3 (2:1) (t3) now working correctly. This should now work for multiple staves too, but needs testing. 

29.01.2012 rev58.144f
Revised (simplified) RedistributeSystemMoments()...

29.01.2012 rev58.144e
Debugging 2c3 (2:1) (t3) first staff (other staves are left proportional).

29.01.2012 rev58.144d
Rewriting RedistributeSystemMoments(). This is now logically complete, but the function 
GetExpansionFactors() still needs to be written.

29.01.2012 rev58.144c
Renamed Redistribute() - > RedistributeSystemMoments() and redesigned its arguments.
TODO: Rewrite RedistributeSystemMoments() using the new arguments.

29.01.2012 rev58.144b
SvgSystem.JustifyHorizontally():
1. added foreach(staff in staves) around do..while loop.
2. new function GetStaffMoments() called to get just the moments in the current voice.

29.01.2012 rev58.144a
Set Study 2c3 to (2:1) (t3). This is the test score which I've been working on, an compiles correctly.
problem is that it only worksd properly in for one staff.

27.01.2012 rev58.144
The left edge of a moment should never be left of the centreX of the previous moment.
All OverlapWidth() functions now return float.MinValue when no overlap is found.
Cleaned up the code and added better comments. Everything looks very good. But I've discovered a little bug...

27.01.2012 rev58.143g
Moved the call to SvgSysem.AdjustRestsVertically() inside JustifyHorizontally() after DistributeProportionally().
This means that the final positions of the rests will be used when justifying.

27.01.2012 rev58.143f
Bug Fix: in Bar 19, the accidental in chord 5 was overlapping the stem in the previous chord, and the first 
dynamic was colliding with the following accidental (but not with 2:1 voices). Horizontal justification needed
to take account of long stems. Beams needed to be made later. This has now been done, but I'm not yet completely
happy with JustifyHorizontally(). Some symbols seem too far apart... Check thoroughly...
1. In SvgSystem.MakeGraphics(), added two calls to AdjustStemHeights() before JustifyHorizontally().
   AdjustStemHeights() moves stemtips (including flags etc) if:
		a) their chord is synchronous with another chord in the other voice and the parts cross.
		b) their chord is part of a beamed group spanning chords in the other voice, and the parts cross.
		c) their chord is contained by a beam in the other voice, and the parts cross.
   This means that long stems will be seen when calling JustifyHorizontally().
2. FinalizeBeamBlocks now just does what it says, making final adjustments to the stemtips only for beamed
   chords.
3. JustifyHorizontally() now acts on NoteObjectMoments rather than the objects in single voices
   (This was an important change!).

26.01.2012 rev58.143e
Renamed SvgSystem.RealizeGraphics() -> SvgSystem.MakeGraphics().
Bug Fix: Barnumbers no longer collide with dynamics. Fix was to move the call to AdjustBarnumberVertically()
to the end of SvgSystem.MakeGraphics().

26.01.2012 rev58.143d
Introduced special fine tuning for particular rest types when shifting them vertically in 2-voice staves. This
is also done in AdjustBarnumberVertically().
Barnumbers could collide with chords which are the 2nd duration symbol on a staff if the first was a rest and
everything is rather squashed. Remedy: if the first duration is a rest, collisions with the following duration
class are also checked.

26.01.2012 rev58.143b
Study 2c2 with 1:2 voices on 1 Staff.
Bug Fix: Barnumbers were at the wrong height (but not with 2:1 voices). Reordered the calls to
AdjustRestsVertically() and AdjustBarnumberVertically() in SvgSystem.RealizeGraphics(). Rewrote the function
AdjustBarnumberVertically(). 

26.01.2012 rev58.143a
Study 2c2 with 1:2 voices on 1 Staff. 
Bug Fix: The staves were too close together on page 2 (but not with 2:1 voices)! Solution: reset staff boundaries 
after moving beams up and down.

26.01.2012 rev58.143
a) Completed the placing of chords, stems, accidentals, beams on 2-voice staves.
b) The ChordSymbol.ChordMetrics and RestSymbol.RestMetrics properties have been added. These return casts of the
objects' Metrics properties. All the code which needed to cast Metrics to these types has now been simplified.
c) The function SvgSystem.RealizeGraphics() has been created. Moved the code from Notator there. The called
functions are now all private inside SvgSystem. This reduces SvgSystem's public interface considerably.
d) Replaced ChordMetrics.LedgerlinesBlocksMetrics list by two fields: one for the upper block the other for the
lower block.

20.01.2012 rev58.142
Bug Fix in ChordMetrics: Dynamics are above the staff if there is a lyric!
Tidied up the following source files. Deleted redundant Functions, Properties and Variables (try out Resharper?) 
	a. SvgSystem.cs done
	b. Staff.cs done

20.01.2012 rev58.141
Implemented the function SvgSystem.AlignLyrics(). This has not been tested, because I dont have a good test
file.

19.01.2012 rev58.140
Bug Fix: A check for _stemMetrics == null is now made in ChordMetrics.GetTopAndBottomBounds().
Bug Fix: Barnumbers were not moving upwards to avoid collisions.
Shifting rests vertically on 2-Voice staves now works correctly. Cleaned up the code for doing this.

19.01.2012 rev58.139
Changed the Metrics.OverlapHeight() and ChordMetrics.OverlapHeight() functions to take a padding argument.
Revised the moving of barnumbers to use these functions.
Revised rests on 2-voice staves: completed the shifting of the top voice rests if they overlap any chord or
rest in the lower voice.

19.01.2012 rev58.138
Barlines between staves are no longer being drawn through chord extenders.
Bar numbers now move correctly upwards so that they dont overlap the following chord.

19.01.2012 rev58.137
Changes to the public interface of ChordMetrics.
Moved the adding of BeamBlocks to Edges inside ChordMetrics.
CautionaryChords, and chord extenders are now working.

17.01.2012 rev58.136 
1. Cleaned up the public interface of ChordMetrics.  
2. Remove the the function Staff.ResetAllChordBoundaries() again.
This was a major undertaking, but I think it has been worth it. The code should be more maintainable in future.

16.01.2012 rev58.135
Added the function Staff.ResetAllChordBoundaries() which does what it says. It resets the top, right, bottom
and left values of all chords (in all voices) on the staff, according to the content of ChordMetrics.MetricsList.
This is something of a drastic cludge, but its effective in setting a point from which I can assume that
everything is neat and tidy. 
Known Bug: five-blob rests don't move away from each other on 2-voice staves. Why not?
 
16.01.2012 rev58.134
Extensive revision of the way dynamics, ornaments and lyrics are positioned.

15.01.2012 rev58.133
NOTE THAT scores can be constructed without including all the Algorithm's midi channels. Instrumental parts
can be made in this way.
After creating metrics for all chords and rests in the Voice: If a staff has two voices, the rests are moved
vertically to their final vertical positions roughly according to the following algorithm
(see Staff.AdjustRestsVertically for a more detailed comment):
 	1. Move top voice rests onto the top staffline, bottom voice rests onto the bottom staffline.
 	2. if the rest collides with a chord at the same MsPosition in the other voice, move it
 	   outwards (in gap increments) until it does not. The rests are now at their final vertical position.
Horizontal collision checking is done later in JustifyHorizontally().

15.01.2012 rev58.132
Dynamics, ornaments and lyrics are now moved vertically again, only when they are part of a BeamBlock. This is
done, while finalizing the beamBlock's angle, inside the function BeamBlock.MoveStemTips(). 
 
14.01.2012 rev58.131i
ChordMetrics constructor now puts dynamics, ornaments and lyrics at the position they should have when the
chord is not part of a beamBlock. (This fixes a bug whereby staves are added too low on the page.)

11.01.2012 rev58.131f
Implementing 2-Voiced Staves. Code should work, but has bugs which I'm currently fixing... Test settings are
in Study 2c1.
Ornament, lyric and dynamic metrics are created inside the ChordMetrics constructor. Each type is created
at the same height (drastically simplifying the previous code), but moved vertically to a point relative to 
their chord after SvgSystem.FinalizeBeamBlocks() has been called.
SvgSystem.FinalizeBeamBlocks() resets all the StemMetrics.
The function system.AdjustDynamicsLyricsOrnamentsVertically() does this.
JustifyHorizontally() now justifies Voices, not staves! :-)
TODO: debug Study 2c1 with the voices at various positions:
	doing -- 2:1, 0 -- 
	 dynamics on top staff OK: dynamics above and below 2-voice staff.
	 staff 2 needs debugging 
	 Problem with barlines at bar 31.(inner barline too short)
TODO: adjust the heights of rests when there are 2 voices per staff.

11.01.2012 rev58.131
Checked that the staff order can be reversed using the MidiChannelPerVoicePerStaff field.
Added check to ensure that standard clefs have 5 stafflines.
Bug fix: if clef.Clefname == "n", its metrics are no longer added to the score.

11.01.2012 rev58.130
Improved the comments to M.Algorithms, M.ChordTypes and M.Clefs.
Bug fix: Song 6c (which correctly contains error fields) no longer crashes when loading. If the create score
button is clicked while there are input errors like this, then it tells the user what the problem is, and
no attempt is made to create a score.

10.01.2012 rev58.129
Created a new class: PaletteDemoScore, for use by the AudioButtons in palettes. These now work correctly.

10.01.2012 rev58.128
Bug fixes: Audio buttons are now working, and all the test files are now created correctly!

10.01.2012 rev58.127
The new fields have been programmed parallel to the systemStartBarNumbers.(Their values have been moved to fields
in the PageFormat). Removed the subclasses of Notator and krystalPaletteScore. 
Song 6a and Song 6b are correctly created.
Song 6c (which contains error fields) crashes. It should warn the user and refuse to create.
The Study 2c and 2d versions crash because the Palette.Expression field is empty. This and similar bugs should be
easy to fix.
The AudioButtons and Study 3 Test also crash. Probably for the similar reasons.
TODO:
1. Debug until all the AudioButtons (in the palettes) are working correctly.
   Then debug until all the real test scores are being correctly created.

06.01.2012 rev58.126a-g
Added the following fields to AssistantComposerMainForm.
		MidiChannelsPerStaff
		StafflinesPerStaff
		ClefsPerStaff,
		StaffGroups
		ScoreTitle (printed at the top of page 1)
		LongStaffnamesPerStaff,
		ShortStaffnamesPerStaff
When loading this form, it gets the available midi channels and the number of bars in the score from the score's 
algorithm (error if no algorithm).
The midi channels are displayed in the MidiChannelsPerStaffHelpLabel. The number of bars is displayed in
theSystemStartBarsHelpLabel. 
An extended help text for MidiChannelsPerStaff can be displayed by right-clicking its second HelpLabel.
MidiChannelsPerStaffTextBox_Leave() sets the number of staves in the HelpTexts of the input fields
which depend on that value.
Removed the static ScoreXXInfo classes by adding an abstract List<NotatorInfo> field to MidiCompositionAlgorithm.
New .mkss Schema.
Loading and Saving .mkss files implemented. All demo score settings are loading/saving correctly.
2-Voice staves can now be entered in the MidiChannelsPerStaffTextBox, but they display a "not implemented"
warning and are treated as an error when exiting the field.
Deleted the NotatorInfo class.
The NotatorComboBox has been renamed ScoreComboBox. It has simple string items, which are the names
of .mkss files stored in directories whose name is the name of the score plus the word " score".
Score.mkss files are now named for the specific score (not the algorithm).
For example if the root folder for the algorithm is "Study 2c", then its scores are saved in folders named 
"Study 2c1 score", "Study 2c2 score" etc. and these folders contain .mkss files of the form "Study 2c1.mkss", 
"Study 2c2.mkss" etc.
When loading an .mkss file, the ScoreComboBox is populated by searching for .mkss files in subdirectories of
the algorithm's folder.
Added a chordTypeComboBox.
In .mkss files:
	a) added a notation.chordType attribute (restricted to "standard", "study2b2").
	b) deleted the names.page1ScoreTitle attribute (and the corresponding fields in AC).
	c) moved the names.longStaffnames and names.shortStaffnames into the notation element.
	d) deleted the "names" element.
Completed the loading and saving of .mkss files by removing the remaining references to NotatorInfo.
Algorithm and ChordType names are now listed in M.Algorithms and M.ChordTypes. These lists are used to populate
ComboBoxes for selecting appropriate values.
MoritzForm1: renamed the new score settings and load score settings buttons. Clicking new score settings button
opens a NewScoreDialog. Quitting this dialog with OK first creates a new directory for the new score and saves a new
.mkss file containing default values there, then loads the new settings into the AssistantComposer.
Renamed chord type "study2b2" -> "2b2"

06.01.2012 rev58.126
DimensionsAndMetadataForm complete and functional. AssistantComposerMainForm needs tidying up.
AssistantComposerMainForm, PaletteForm and OrnamentsForm: Save and Create Score buttons are now interacting
correctly across all palette types. An unexpectedly complicated problem involving the "Saved" state of the
various connected forms. There is probably a more elegant way to do this.

04.01.2012 rev58.125
AssistantComposerMainForm: Palette values can now be saved even if the values are not able to create a score (they
may be being worked on). Attempting to create a score when there are errors in the input fields or no algorithm has been
defined, still generates an error message.

04.01.2012 rev58.124
Starting Moritz without the keyboard now displays only one error message.

04.01.2012 rev58.123
SvgSystem.WriteBarlines(): Barlines on 1-line staves extend 1.5 gaps above and below the staffline.
Barlines on 2, 3 and 4-line staves extend from 1 gap above the top staffline to 1 gap below the bottom staffline.
On staves having 5 or more stafflines, barlines extend from the top to the bottom staffline as usual.
 
22.12.2011 rev58.122
Re-included Study 2 in the form of Study 2c. This uses the values in the old palettes adapted for the new
palette definitions (using bytes rather than percentages). BOTH NOTATIONS ARE BEING WRITTEN AND PERFORMED! :-)
Added 2b2 notation to Song 6, and adjusted barlines for staves having less than 5 stafflines, so that they
always extend above and below the staff by Gap pixels.
Notation folders are now named after the item names in the NotationComboBox. (see NotationInfo)

21.12.2011 rev58.121
AssistantComposerMainForm.SystemStartBars is now working. The values are normalized when leaving the text box,
so that they start with bar 1 and are in ascending order. Duplicate bar numbers are silently removed.
It is not possible to know how many bars the piece has until the algorithm has been executed, so bar numbers
beyond the end of the piece are not checked. Such barnumbers are simply ignored when formatting the piece.
 
21.12.2011 rev58.120
AssistantComposerMainForm: added a standard chord notator option for breaking beams at barlines. This is 
parallel to the minimum crotchet duration option, and is working.
Also, replaced the SystemStartBars text box and label, but these do not yet work.
 
20.12.2011 rev58.119
Replaced Song6. This is now correctly written, but beams should be broken across barlines.

20.12.2011 rev58.118
Decoupled krystals and palettes in AssistantComposerMainForm.
PaletteForms and PercussionPaletteForms implement IPaletteForm.
Created the AudioButtonsControl which is added to IPaletteForms programmatically (like the BasicChordControl).
This considerably reduces the amount of duplicated code in the palette types.
The Study 3 tests score is correctly written!

16.12.2011 rev58.117
PerformanceOptions files (.mpox files) are stored in the score's root folder, one level higher than the .html
and/or .svg files containing the notation. (Every notation of the score contains the same MIDI info.)

16.12.2011 rev58.116
Preferences now contains XmlSchemasFolder (which had been forgotten).
Different notations of a score algorithm are now saved in subfolders ("notation 1", "notation 2" etc.) of the
score's root folder. The corresponding .mkss file (which names the notator) is saved next to each notation of
the score.

15.12.2011 rev58.115
Changed protection levels so that as many public items as possible are now internal. This may not have been
done perfectly, but its an improvement. Probably this should be done again using a tool (Resharper?).

14.12.2011 rev58.114
Removed Moritz.Score.MoritzScoreStatics.cs. Moved the fields into Moritz.Globals.MoritzStatics.cs (i.e. M).

14.12.2011 rev58.113
Removed all unused usings. Namespaces generally reflect the directory structures inside each project, but this
can't be done pedantically.

14.12.2011 rev58.112
At last!! Completed the final project structure for the whole solution.
Vital move was to define the IMoritzForm1 interface in the Moritz.Globals project.
The solution now has the following projects, which build in the following order:
	Moritz.Globals
	Moritz.Score
	Krystals4ObjectLibrary
	Moritz.AssistantPerformer
	Moritz.Krystals
	Moritz.AssistantComposer
	Krystals4Application
	Moritz
Deleted all unused folders (old projects) in the Moritz folder.

14.12.2011 rev58.111
MoritzForm1 interaction with KrystalsComposer and AssistantPerformer complete.
Created two new projects:
	Moritz.Globals (containing Moritz.Globals.cs and Preferences.cs)
	Moritz.Krystals (KrystalBrowser.cs, StrandsBrowser.cs, ContoursBrowser.cs, KrystalInfo.cs)
Moved the Krystals4ControlsLibrary files inside Krystals4Application, and deleted the Krystals4ControlsLibrary
project.

13.12.2011 rev58.111a
Reloaded the New.KrystalComposer project, and put its files in a directory inside the Moritz project.
This version compiles, but has not been tested.

13.12.2011 rev 58.110
Moved all project files into directories inside the Moritz project. Kept their namespaces.
Reorganized Preferences: The user directory can now be set by the user. The only file which has a fixed
location is the Preferences file itself, which is at Admin/Documents/Moritz/Preferences.mzpf.
Moved the Current Input Device and Current Output Device ComboBoxes to MoritzForm1.
Adjusted the AssistantPerformerMainForm layout. The AssistantPerformer is working. 

08.12.2011 rev 58.109
Completed the AssistantPerformer.
1.Fixed Bug: Clicking the stopPlayingSymbols button opened the saveMidiFileDialog, but the performance didn't
actually stop until the file dialog was closed! Fix: StopMidiStreaming() is now the last call in
AssistantPerformerRuntime.Stop().
2. Cleared up the confusion about what the global startAtMoment option actually means.
If there is at least one PerformersMoment, the performer's moment numbers are reported, otherwise the
Assistant's moment numbers are reported. In SetForPerformerOrAssistantsMoments():
	a) The AssistantPerformerMainForm's help texts are changed according to which moment numbers are meant.
	b) A private Dictionary<int MsPosition,int MomentNumber> is set so that ReportPosition(msPosition) clearly
	   reports either the performer's or the assistant's moment number.
ReportPosition now just takes an msPosition argument, and is called by both the LivePerformer and the Assistant.  
3. Added a "Show score" button.
4. Checked and edited the help texts on the AssistantPerformerMainForm again.

07.12.2011 rev58.108x
Added Assistant.IsBusy and PerformanceState.IsBusy properties, and checked these before completing performances.
This prevents the SaveMidiFile dialog from appearing too early in an assisted performance.
AssistantsDurationOptions: AbsoluteDurations OK (The Speed option is also working.)
AssistantsDurationOptions: RelativeDurations OK
Checked and edited the help texts on the AssistantPerformerMainForm.

07.12.2011 rev58.108w
Continuing to test/correct the options:
PerformersDynamicsOptions: AsNotated OK
PerformersDynamicsOptions: AsPerformed OK
PerformersDynamicsOptions: Silent (conductor option) OK
PerformersPitchOptions: AsNotated OK
PerformersPitchOptions: AsPerformed OK ( required a new function MidiChord:ResetMidiPitches() )

07.12.2011 rev58.108v
New namespace for all the files in the Runtime folder: Moritz.AssistantPerformer.Runtime
Renamed some runtime delegates, moved their declarations to a separate file.
Tidied up AssistantPerformerRuntime.cs

06.12.2011 rev58.108u
Testing Options:
Global: StartAtMoment OK -- the moment number has a different meaning, depending on whether the preformer or assistant is meant.
Global: RepeatPerformance? OK
Global: SaveMidiFile? OK -- assisted performance needed an if(InvokeRequired) clause.
Global: MinimumOrnamentChordDuration OK

06.12.2011 rev58.108t
Both live and assistant performances working correctly. The stop button is also working correctly for both
assisted and assistant-only performances.
TODO: Test all options, and find out if any fields in Assistant, AssistantPerformerRuntime etc. can be deleted.

06.12.2011 rev58.108s
Revised TimeControl. Assistant-only performance performing and reporting correctly. 
TODO: debug assisted performance.

05.12.2011 rev58.108r
Completing AssistantPerformerRuntime. There are still some bugs surrounding the reporting of positions to the
main form. Also, check TimeControl very carefully to see which fields are really necessary (above all when the
assistant is playing relative durations).
 
05.12.2011 rev58.108q
MoritzInputDevice, AssistantPerformerRuntime and MoritzOutputDevice connections complete but not tested.
 
02.12.2011 rev58.108p
Beginning to work on AssistantPerformerRuntime.

02.12.2011 rev58.108o
Completed AssistantPerformerMainForm and new .mpox schema, complete with saving and reading.
Renamed score Song 6 tests --> Study 3 tests.
Deleted all scores before Song 6 (which still contains Cytemnestra's texts etc.).

02.12.2011 rev58.108n
Working on AssistantPerformerMainForm.
Moved StartMoment, repeat? and save MIDI file? options into global field. 
TODO: sort out .mpox file schema, saving and reading.

01.12.2011 rev58.108m
AssistantPerformerMainForm:
Replaced Quit button (at bottom-right of form). 
Red, top-right system button removed. 
Preferences button moved to bottom left.

01.12.2011 rev58.108l
Deleted AssistantPerformerMainForm Quit button. Quitting is now done using the red, top-right system button.
Moved device check to AssistantPerformerForm1

01.12.2011 rev58.108k
Reorganized static global constants.

30.11.2011 rev58.108j
Temporarily removed New.KrystalComposer project (it is still in the Moritz solution folder). Replace it and
complete it (referencing Moritz.AssistantPerformer) when the Moritz.AssistantPerformer is complete and working.
Added Moritz.AssistantPerformer. Now working on this. Once it is complete and working, its objects can be referred
to by New.KrystalComposer.

29.11.2011 rev58.108i
Working on New.KrystalComposer...
New.KrystalComposer should reference objects defined in Moritz.AssistantPerformer (which has not yet been created
here). I'm about to create a version of the AP independent of the patch editor, but will do that in a different
fork: (rev58.108.1) before moving the result here.

29.11.2011 rev58.108h
Working on New.KrystalComposer
Moritz.Score.SvgScore.cs still contains region(s) which have been commented out, and which must be 
moved to (derived types defined in) Moritz.AssistantComposer.

29.11.2011 rev58.108g
Moritz.Score builds without error.
Moritz.Score.SvgScore.cs
Moritz.Score.PageFormat.cs, 
Moritz.Score.MidiChordDef.cs and 
Moritz.Score.BasicMidiChordDef.cs
all contain regions which have been commented out, and which must be moved to (derived types defined in)
Moritz.AssistantComposer.
 
29.11.2011 rev58.108d
about to delete MidiScore from NewMoritzScore. MidiScore is only used during performance....
29.11.2011 rev58.108c
Working on Moritz.Score
 
29.11.2011 rev58.108b
See TODO list above: All the project files have been created.
The following have been populated, and build without error.
	Project 1: SanfordMultimedia.Midi 
				- uses Moritz\SanfordLibraries\Multimedia.dll and Moritz\SanfordLibraries\StatemachineToolkit.dll
	Project 2: Moritz - class library
					contains system level utilities for devices, files and midi.
					uses - the Sanford libraries, WMPLib (=WindowsMediaPlayer)
	Project 3: Moritz.Krystals - class library
					contains krystals utilities
					uses Krystals4ObjectLibrary

23.11.2011 rev58.108
Created a new KrystalPaletteScore class as a subclass of SvgScore.
Deleted the Notation field from the Metadata dialog.
Both AC and AP tested and running for Song6Tests. 

23.11.2011 rev58.107
Reorganised namespaces: Moritz.MIDI -> Moritz.Midi and SVG -> Moritz.Svg.
Deleted some superfluous directories inside Moritz.

23.11.2011 rev58.107
SanfordMultimedia.Midi.Sequencing.TrackClasses.Track.cs.Insert(int position, IMidiMessage message):
I have commented out an AssertValid() call. This was originally done on Leslie Sanford's advice in August 2007
to avoid long waits while loading files.
While integrating this code into Moritz (23.11.2011), I discovered that the call had been replaced,
but its final assertion failed while Moritz was playing very fast notes without stopping or affecting the
performance. The call simply seems not to matter, so I've commented it out again. 
Dangerous maybe, but effective! :-)

23.11.2011 rev58.106
Removed the CapellaColor class. The ColorString class does the same thing.

23.11.2011 rev58.105
Moved Sanford libraries inside Moritz. 
Multimedia.dll and StateMachineToolkit.dll are now in the directory Moritz\SanfordLibraries.
Added project SanfordMultimedia.Midi (including source code!) so that it wil get compiled on whatever system
the user has (32bit, 64bit).
All references to these libraries now point inside the Moritz solution.
 
23.11.2011 rev58.104
Just updated this _revision58Log file with the above TODO list. I'm about to start major restructuring.

16.11.2011 rev58.103
Bug Fix: When the performer ends with a rest, and the assistant has more moments to play, the assistant's
remaining moments are played when the performer sends his final chordOff. The performer's chordOns and
chordOffs are ignored while the assistant is playing alone to the end of the piece. 
The solution is to be found in the ChordOff region in AssistantPerformerNode.DoAssistedChord().

16.11.2011 rev58.102
Checking score reading and playing back.
Bug Fix: In SVG flies, custom MidiChordDefs now have an ID beginning with the string "localChord".
MidiChordDefs whose ID does not begin with "localChord" are read from the svg <defs>. (i.e. they contain a <use> element.)

15.11.2011 rev58.101
1. BeamBlock.UpperEdge() and LowerEdge() replaced by OuterEdge().
   In BeamBlock.OuterEdge():
	b) the final line has been changed to top -= stepWidth * tanAlpha instead of +=
	c) float heightDiff = qBeam.LeftTopY - qBeam.RightTopY; // keep things positive
	d) stepHeight is first initialised to (_beamThickness * 0.2F);
2. Bug Fix in Edge.AddStaffMetrics(): BeamBlocks are now only added once to the Staff!
3. Bug Fix in SvgSystem.SetBarlineVisibility(): The visibility of the final barline on each staff is now set. 
4. Invisible Extenders now have their Metrics.Top and Metrics.Bottom set to Metrics.OriginY - (gap / 2) and
   Metrics.OriginY + (gap/ 2) respectively. Metrics.Top and Metrics.Bottom are used when constructing Edges,
   which are used when drawing barlines between staves.

15.11.2011 rev58.100
Bug Fix in ChordMetrics.SetFlagsPositionReNoteheads(): Quaver flags are now at the correct vertical position 
for all notehead positions on a five line staff.

11.11.2011 rev58.99
Beams no longer break for an invisible chord symbol.
SystemBarline (at start of system, between staff groups) now drawn correctly.
TODO: 
a) Fix Bug: external barlines are not joining to external beams. Correct Edges or do a special case for barlines.
b) Fix Bug: quaver flags are half a space too low on a notehead two ledgerlines down.

11.11.2011 rev58.98
Barlines are now drawn so that they respect the StaffGroups setting, and don't pass through continuing notes.

09.11.2011 rev58.97
MidiCompositionAlgorithm now has an abstract virtual SetProperties() function, replacing
GetMidiChannels() and GetNumberOfPalettesPerKrystal(). This is the way Notator works too.
The StaffGroups property (which was not being used (!), has moved from MidiCompositionAlgorithm to Notator 
where it belongs.
Added the Barline.Visible property (default is true), and set it to false when it precedes a
CautionaryChordSymbol. TODO: Implement invisible barlines.

09.11.2011 rev58.96
All extenders and (square) cautionary brackets are now tested and working.
The CautionaryChordSymbol class is a child of ChordSymbol. CautionaryChordSymbols are created following any
barline which is straddled by a ChordSymbol, but they are only visible at the start of a Staff. They have
zero msDuration. The original ChordSymbol retains its original MsDuration, and has an additional 
MsDurationToFollowingBarline field which is set when it continues across the barline. 

09.11.2011 rev58.95
Cautionary chords are now written a the start of each system, if the chord is continuing.
TODO: draw a bracket round the noteheads, and add the extender lines.

09.11.2011 rev58.94
Split SvgSystem.AddNoteheadExtenderLines() internally into three functions: AddExtendersAtTheBeginningsofStaves(),
AddExtendersInStaves() and AddExtendersAtTheEndsOfStaves(). The first of these currently does nothing, the
others are working.

08.11.2011 rev58.93
New class ExtensionLineMetrics. This is added to a chord's ChordMetrics.MetricsList if the chord's duration 
class is greater than quaver, and the chord straddles a barline. ExtensionLineMetrics are attached in 
SvgSystem.AddNoteheadExtenderLines().
ExtenderLines are working except for when they start at the beginning of a staff as the result of being
continued from the previous systems.
Added LocalizedCautionaryChordDef.CautionaryMidiChordDef field. TODO: use this to create cautionary chords and
their extenders. 
 
08.11.2011 rev58.92
MidiCompositionAlgorithm.SplitBar(): Rests are always split over barlines. If a chord straddles a barline,
its LocalMidiDurationDef.MsDurationToNextBarline field is set and an LocalizedCautionaryChordDef object
is created at the start of the voice continuation in the next bar.
SvgSystem.MomentSymbols(): corrected the final barline position for chords which cross final staff barlines.
This was necessary for correct justification.
Added int? LocalMidiDurationDef.MsDurationToNextBarline, which is set for chords which cross barlines.
Deleted the LocalMidiDurationDef.MidiDefList and LocalMidiDurationDef.NextLMDD fields.
Deleted SvgScore.FinalizeTies().

07.11.2011 rev58.91
Beams now cross barlines within a system, but dont continue at the left or right of systems.
They are not related to MidiDefLists, but are simply as long as possible within each system.
They are broken by rests (if rest.IsTieContinuation is false) or clefs or chords which have no beams because
they are too long (crotchets, minims, semibreves, breves).

07.11.2011 rev58.90
SvgScore.FinalizeTies(): Replaced suppressed "ties" when they happen at the ends of systems. "tied" notes are
currently notated as two chords without a graphic tie. Suppressed ties (all of which now cross barlines inside
a system) will be notated as a single chord with an invisible barline. Possibly, tied notes at the beginning or
end of a system will also have an invisible barline.
Deleted the class LastLMDDInVoice. (Was left over from an undone edit.)

07.11.2011 rev58.89
Notator.AddSymbolsToSystems(): Suppressed short ties across barlines, by resetting the duration of the first 
chord to the total duration of the tied chords, and replacing the second chord by an LocalizedCautionaryChordDef.
The suppression is done if the first chord's duration is less than a quaver, and the second chord is not tied
to a further chord. This is done before bars are joined to systems. 
TODO: Replace suppressed "ties" at the ends of systems.
Currently, "tied" notes are notated as two chords without a graphic tie.

07.11.2011 rev58.88
MidiCompositionAlgorithm.SplitBar(): Chords and rests are now always split when they cross barlines.
Added a pointer: LocalMidiDurationDef.NextTiedChord. This links the two halves of a chord which has been 
split across a barline.
Added a pointer from LocalMidiDurationDef to its containing MidiDefList. This should enable beams to be
drawn across barlines.
Currently, "tied" notes are notated as two chords without a tie.

06.11.2011 rev58.87
MidiCompositionAlgorithm.SplitBar(): Successfully split bars 3-5 to create bars 3, 4 and 5 -- written in 1, 2
or 3 Systems. Rests are split:
1. if they start at the beginning of a bar and are longer than that bar, or 
2. if they reach to the end of the following bar or beyond.
In other words: Whole bar rests are created where possible. This will mean that barlines can be drawn through
long rests.
Note that the total duration of a chord is contained in its first symbol, but that there is an
LocalizedCautionaryChordDef object at the start of the following voice. This object might be used to draw
cautionary chords at the start of systems.

05.11.2011 rev58.86
Test3 (splitting bars) begun: Composing Bars 3 to 5 of the test file, to test chords and beams which cross
barlines correctly when the bars are moved onto the same or different systems.
  
03.11.2011 rev58.85
Added and tested the setting of MidiDefList.MsDuration.
Added the MidiDefList.EndMsPosition property. Removed all external additions of MsPosition + MsDuration.
Tidied up the Song6TestsAlgorithm.DoAlgorithm() code.

03.11.2011 rev58.84
Bar 2 of Song6Tests completed. TODO: add MidiDefList.MsDuration set, and a MidiDefList.FinalMsPos property.
Remove all additions of MsPosition + MsDuration.

03.11.2011 rev58.83
Defined a MidiDefList class.

03.11.2011 rev58.82
Beginning to create a new algorithm using note-groups.
Moved "system start bars" out of AssistantComposer.cs (form) and PageFormat.
Replaced it by public abstract List<int> GetSystemStartBars() in MidiCompositionAlgorithm.cs.
Updated and tested all current algorithms:
Song6: 1, 6, 11, 17, 22, 27, 32, 38, 44, 49, 55, 60, 65, 70, 75, 80, 86, 92, 97, 104
Song6Tests: 1 (Currently. This is about to change.)
Study3: 1, 7, 13, 19, 25, 31, 38, 44, 50, 56, 62, 68
PaletteDemo: 1

02.11.2011 rev58.81
Created a new score type for testing: "Song 6 tests". This has both algorithm and notator classes, and is integrated
into the AssistantComposer's popup menues. Song6TestsAlgorithm.cs currently creates a test score containing Song 6's
palettes. Song6Algorithm.cs (which will eventually create the finished score) currently just contains a stub with
Clytemnestra's (uncompleted) music. 

21.10.2011 rev58.80
Created a new Cubase project Song6Tests.cpr in D:Cubase/Song6. This contains the imported "Song 6 tests.mid" midi
file, and some test filters etc..

21.10.2011 rev58.79
Created a new score: "Song 6 tests" containing the contents of each of the currently existing 8 palettes.
This score prints and runs. Created "Song 6 tests.mid" for use in testing sounds in Cubase.
 
20.10.2011 rev58.78
Bug Fix: in SvgScore.GetKrystalPaletteDefs() krystal palettes were being saved too often! 
Blackbird and cormorant palettes (4 each) complete. 

15.10.2011 rev58.77
Bug Fixes (working on KrystalPaletteForm):
1. PitchWheel was not working because it needs its ChannelMessage.Data2 to be set.
   The PitchWheel is a Command, while other sliders are Controllers - which use ChannelMessage.Data1!
2. PitchWheelDeviation was not working because it requires both its coarse and fine controllers to be set!
3. Removed possible comma at end of envelope text box.
4. Added control initialization to beginning of first midiChord in each channel (in MidiScore.cs). This improves
   the editing experience, apart from anything else! 

14.10.2011 rev58.76
Beginning to create the first blackbird palette (associated with the dummy krystal "lk1(12)-2.krys"). The blackbird
samples have been slowed down 25%. I want to create even lower pitches than these.

14.10.2011 rev58.75
Completed four cormorant palettes (palettes 1-4). These each have domain 12, and are associated with the (dummy)
krystal pk4(12)-2.krys. Palettes will later be addressed 2-dimensionally, using two parallel krystals at once.
For example: K1 selects the palette, K2 selects the chord in the palette. Other krystals will control where the 
chord comes in the score. 

14.10.2011 rev58.74
Created two new krystals [xk2(1.12.12)-1.krys and xk2(1.12.12)-2.krys]. The latter by editing the former by hand.
Completed cormorant palette 1. TODO cormorant palette 2 (changing pitches per chord). 

14.10.2011 rev58.73
Added a save button to palette form. Developing first cormorant palette (constant pitch per chord).

12.10.2011 rev58.72
Encapsulated Clytemnestra's part in a new Clytemnestra object.
 
12.10.2011 rev58.71
Added empty bars between Clytemnestra's verses. These are temporary placeholders. Their actual number and duration
will be decided according to the Furies' music, which has yet to be composed.

11.10.2011 rev58.70
Long (on first system) and short staffnames are now supported/required. They appear automatically centred in the
left margin. The width of the left margin is set automatically, according to the lengths of the staffnames, but 
has a minimum value of PageFormat.LeftMarginPos.

11.10.2011 rev58.69
The position of a chord's lyric now takes account of low notes and flags. Also, if the chord has a lyric, it's
dynamic is placed above the staff (taking account of high notes and flags).

10.10.2011 rev58.68
Added lyrics under the voice part. Lyrics are a new type of DrawObject. The position of the lyric could be described
better to take account of low notes and flags. The position of the dynamic must be set after setting the position
of the lyric.

10.10.2011 rev58.67
New function: Song6Algorithm.AdjustControls(). This removes all controls except the patch, which it sets to 71
(i.e. midi clarinet). Local chords (those which do not use "use") have an ID consisting of the string "localChord"
concatenated with a unique int identifier. The AssistantPerformer plays the file correctly.

09.10.2011 rev58.66
Song6Algorithm.DoAlgorithm():
	1. Code moved into clearly defined functions!
	2. Removed the superfluous rests from Moritz' score, leaving them in only where they exist in Song6.capx.
The generated score currently contains only the singer's part.
MidiUtilities.GetMomentDefs(): Added the folowing comment:
	This function has not been completely tested to see that controls inside MidiChordDefs are returned correctly.
	This function was used in Song6Algorithm to analyse the singer's text (which I had recorded manually with the
	AssistantPerformer), but only the MomentDef.MsPosition and the MidiChordDef.BasicMidiChordDef info was relevant there.
	Any controls contained in the returned MidiChordDefs were irrelevant, and were ignored.

21.09.2011 rev58.65
Debugging Control values: Bug Fix: when writing an un-<def> midiChord, the score:midiChord element was getting
nested inside itself! The score now plays (with wrong control values) in a Moritz patch! Getting there.

21.09.2011 rev58.64
Moritz now creates a score having symbols whose pitches, msDurations and msPositions are taken from the midi
files created in rev58.58. The score also contains barlines (where I composed them in the Song6.capx file containing
the whole vocal part) and long rests between verses. The final durations of these long rests, and what happens in
them, can be decided later. They are realy just for orientation while composing the verses.
Note that the MidiScore(Multimedia.Midi.Sequence, performanceOptions) constructor is not being used after all,
but that it could be used to play any midi file live in the AssistantPerformer. This constructor also uses
MidiUtilities.cs, which basically contains extensions to the Multimedia.Midi.Sequence class.

20.09.2011 rev58.63
Changed the MidiScore(midiPathName) constructor to MidiScore(Multimedia.Midi.Sequence, performanceOptions).
Note that the other MidiScore constructor is MidiScore(peformanceOptions, svgScore) with the performanceOptions
as the first argument. This allows the constructors to be called as MidiScore("", null) without ambiguity.
Bug Fixes include: MidiChord positions are now also adjusted to their containing MidiMoment positions when moving
the moments so that the first is at msPosition=0.

20.09.2011 rev58.62
Corrected the name "Song V" to "Song 6 sketch" in all files and documents. The error happened because Song 6 is part of
Retrospective Scene 5.
Corrected the MidiScore(midiPathName) constructor internally to be more like MidiScore(svgScore, performanceOptions).  

19.09.2011 rev58.61
Working on a new MidiScore(midiPathName) constructor: This currently works, creating a list of Moments in the
AssistantsMoments corresponding to the info in the midi file. Moment positions and durations seem to be correct,
but I'm not so sure about the contents of the Midichords inside the Moments. They should be okay, but it would need
some careful debugging to find any errors.

15.09.2011 rev58.60
Created a stub Song 6 algorithm in SongVAlgorithm.cs. This currently says that it uses 1 krystal having 1 palette,
but these are currently ignored by the algorithm. They will be replaced by active krystals and palettes later.
Created a stub Song 6 notator in SongVNotator.cs. This currently says that it will notate channel 0 on one staff.
Running the AssistantComposer with these settings creates an SvgScore with one staff. Currently, the final barline
appears at the beginning of the staff, but (I think) this is only because no bars have been created yet.
Added the algorithm and notator to the Assistant Composer's available settings: the NotatorComboBox is updated to
contain the available notator types whenever the AssistantComposer.MidiAlgorithmComboBox changes.

15.09.2011 rev 58.59
Reorganized folder structure inside Solution Explorer's SvgScore/Composition folder.
Added a SongVAlgorithm.cs. This currently says that it wants 1 krystal, but the krystal defined in the AssistantComposer
will be ignored (for the moment).

14.09.2011 rev58.58
Created midi files containing the ChordOn positions to be used by the singer's notation in Song 6. Did this as follows:
	1. Created 5 capella files (.capx) containing one verse each. Each syllable is associated with a single,
	   nominal crotchet. Alternate lines are on pitches F and G, to make it easier to locate particular syllables
	   in the midi file.
	2. Created midi files by recording the .capx files live in the last version of Moritz to support capella.
	   There are 2 or 3 recordings of each verse. Note that some notes are too short in some of these files
	   (due to a bug in Moritz), but that the ChordOns are always in the right places. I will have to
	   determine/correct the ChordOff positions later... Probably just a question of deciding where rests should be
	   inserted.
	3. Copied all these files into the apropriate folders in this Moritz version -- the current version which does
	   not support capella.

Above this line: Song 6 (Working through a TODO list from 14.September...)
===================
13.09.2011 rev58.57 Implemented channel 9 percussion: (the intermediate revisions have not been saved)
Notes:
	a) Moritz does not send ChordOffs on the percussion channel 9.
	b) Moritz only supports one percussion instrument (=one pitch) per chord on channel 9.
	c) Percussion instrument indices (=pitches) are restricted to the range 35..81. Those defined in the 
	   PercussionOrnamentsForm _override_ the ornament's base value in the main form. This is unlike the
	   practice when dealing with pitches, in which the ornament pitches are _relative_ to the base pitch.
In detail:
1. Created the BasicPercussionControl, PercussionPaletteForm and PercussionOrnamentForm classes by copying and 
editing existing objects. These objects contain only the fields required by channel 9.
2. AssistantComposer: reorganized the buttons under the palettes ListBox
3. Created a new MIDIPercussionHelpForm containing info about the percussion instruments available on channel 9.
-------------------

08.09.2011 rev58.56
The media player now calls a delegate function in the krystal palette informing it that the player has stopped.
The delegate changes the corresponding button's icon back to "start", and sets the local _performingButton field to
null.
Clicking the mouse's middle button on an audio event button displays the name of the button's audio file.
Added a help text about buttons for loading, starting, stopping, and reloading audio files.
Clicking on the krystal palettes form itself also stops a performing sample.

08.09.2011 rev58.55
Added the audio event filenames to the .mkss file (loading and saving).
Added functional icons for "start", "playing" and "no file" for the audio buttons.

08.09.2011 rev58.54
Updated the above TODO list.
Added a series of buttons, parallel to the midi test buttons in krystalPalettes. These can play audio files which
I want to "sketch" or "copy" in the midi settings. Important to have a target when developing sounds.
This currently works for the single audio buttons - also stopping playback with any button, and loading a file with the
right mouse button. Each button's Tag field is a MoritzMediaPlayer, whose URL is loaded with the file name to play.

07.09.2011 rev58.53
Bug Fixes (completion of the specifications documented below).
The MidiScore now exposes a list of the midi channels which are actually used. This list is used by the
PerformanceState constructor so that the correct number of background workers is constructed.
Also (as in the documentation below), the channels which are used no longer have to be in a continuous sequence.
This means that algorithms can use channel indices like {0, 4, 9, 10}. (The Notator decides the allocation of
channels to staves in the score.)
Note that channel index 9 is the Microsoft GS Wavetable Synth's percussion channel - which appears to ignore patch 
info (it plays percussion instruments).

07.09.2011 rev58.52
Added the MoritzMediaPlayer class so that I can play audio files in Moritz. This player is simply a
wrapper for the WindowsMediaPlayer. It could obviously be extended, but I dont need any more functions
for now... See the test program "MoritzMediaPlayerApplication" in the "_demo projects" folder. The player
has been tested in the test program, but is not yet used in Moritz.

06.08.2011 rev58.51
Notators now have a public SymbolSet field which can currently be set to one of the following two derived types:
	 StandardSymbolSet
	 Study2b2SymbolSet.
The following abstract/overridden functions have been moved from the Notator into the corresponding SymbolSet
objects:
    WriteSymbolDefinitions(SvgWriter w);
    WriteJavaScriptDefinitions(SvgWriter w);
    NoteObjectMetrics(Graphics graphics, NoteObject noteObject, float gap, float storkeWidth);
    GetDurationSymbol(Voice voice, LocalMidiDurationDef lmdd, ref byte currentChannelVelocity, 
        int minimumCrotchetDuration, float musicFontHeight);
Specialized Notators load the symbolSet they want to use, and calls to the above functions are made through the
Notator.SymbolSet object.
This makes it much easier to create new types of Notators (using existing symbol sets but with different system layouts).

06.08.2011 rev58.50
Added MidiCompositionAlgorithm.MidiChannelsCheck().
MidiCompositionAlgorithm.DoAlgorithm() no longer takes notator and gap arguments. Instead, algorithms
simply create a simple list of Voices (one voice per midi channel).
When the score is _notated_, the Notator adds the Voices to the appropriate Staves.

05.08.2011 rev58.49
When the NotationTypeComboBox changes: If the Notator.UsesStandardDurationClasses field is true, the minimum crotchet
duration text box is displayed (otherwise it is hidden). (Both the current notators use standard duration symbols --
Study 2b2 uses standard rests.)
The AssistantComposer cannot be saved if there is an error in a textBox, or if the numbers of krystals
and associated palettes are not those required by the stipulated midiAlgorithm.

04.08.2011 rev58.48
Major revision of the AssistantComposer form. Deleted the Clefs text box. Notators are now responsible for defining
clefs, stafflines per clef, where to notate midiChannels etc. (see below). MidiChannels (created by the midiAlgorithm)
can now be allocated to any voice in any staff. The assumption of one voice per staff and midiChannels allocated from
top to bottom (as in Study 2) is no longer necessarily true.
Have begun to implement the following (will be completely implemented in the next revision):
The AssistantComposer form has two comboBoxes: (implemented)
	MidiAlgorithmComboBox -- currently contains just one item: "Study 2"
	NotationTypeComboBox -- contains items related to the value of the MidiAlgorithmComboBox. When "Study 2" is
							selected in the MidiAlgorithmComboBox, it contains "Study2b2" and "Study2b3".
MidiAlgorithms have the following public virtual fields: (implemented)
	List<int> MidiChannels // a list of the midiChannels created by the algorithm.
	List<int> NumberOfPalettesPerKrystal // the number of palettes required by each krystal
	The above two lists are unrelated.
Condition (checked in the AssistantComposer when the MidiAlgorithmComboBox value changes): (not yet implemented)
	The number of KrystalPalettes defined in the dialog must be numberOfKrystalPalettesRequired, otherwise
	the krystalPalettes dialog goes pink.
Specific Notators set the following public fields: (implemented)
	List<List<int>> MidiChannelsPerStaff; // The internal List<int>s are in order of staff from top to bottom.
										  // The internal List<int>s contain the midiChannels for each Voice
										  // on the staff from top to bottom.
	List<string> ClefsPerStaff; // Any of the available clef types
	List<int> StafflinesPerStaff;
	List<int> StaffGroups; // barline groupings
	bool UsesStandardDurationClasses; // true if the notation uses crotchets, quavers etc.
Notator field conditions (checked in the main Notator constructor by the Notator.CheckProperties function):
1. The first three lists have the same length. The length is the number of staves per system.
2. StaffGroups must add up to the number of staves in the system. The numbers define the number of staves per group
   from top to bottom of the system.
2. MidiChannelsPerStaff: 
	The (int) midiChannel values created by the MidiAlgorithm are the only int values which can be used. 
3. StafflinesPerStaff:
	Standard clef types must have 5 stafflines, "n" clef types can have any number of stafflines > 0.

03.09.2011 rev58.47
Removed the Study2b2 and Study2b3 classes, replacing them by additional arguments to the SvgScore constructor.
Changed the AssistantComposer.CreateSVGScore() function accordingly.
The additional arguments are the "midi algorithm" and "notation types" set in the AssistantComposer form.
Normally, new scores will always be created using this updated SvgScore constructor directly. But there is an
exception: The PaletteDemoScore (which inherits from SvgScore). 
A PaletteDemoScore has a single midi channel and no notation. It is constructed using only the information on a
PalettesForm. Construction does not use information in the AssistantComposer's main form.

03.09.2011 rev58.46
Changes to AssistantComposer form.
Added a "midi algorithm" Combobox parallel to the notation type combobox. This combobox currently just contains
the "Study 2" algorithm. Changed the "notation" group box to "content". Made the corresponding changes to the
functions which read and write AssistantComposer form settings (.mkss files).

03.09.2011 rev58.45
Changed the protected Score._notator field to public Score.Notator, and moved the Score.NoteObjectMetrics function
into Notator (still as a virtual function with overridden versions in the instantiations of Notator).
Changed the current call to Score.NoteObjectMetrics -> Score.Notator.NoteObjectMetrics.

02.09.2011 rev58.44
1. The main title of a piece (top, middle of page 1) no longer changes to reflect its notation type.
   All versions (notations) of the piece are now put in the same folder in Moritz' standard scores folder.
   The name of the folder is always the main title of the piece.
2. Changes to AssistantComposer form (and Metadata): 
   a) Metadata now includes the notation type ("standard chords" or "Study 2b2") as set in the AssistantComposer's
      NotationTypeComboBox.
   b) Metadata keywords and comment can now be set in the main AssistantComposer form.
      Metadata continues to have the existing default values (Author, Date etc.).
A score's "about" box (as displayed by selecting the context menu command in SvgScoreNode) displays its Metadata.
Documentation: Filenames for scores having the same main title (e.g. "Study 3") but different notations have files
distinguished by an arbitrary string following a '.' after the main title and preceding the file's Windows suffix.
For example: Study 3.mpox contains the definition of "Study 3.html", "Study 3 page 1.svg" etc.
Study 3.alternative.mpox contains the definition of "Study 3.alternative.html", "Study 3.alternative page 1.svg" etc.
By convention, if the arbitrary string is not present, the notation is "standard chords".

02.09.2011 rev58.43
The sizes of the symbols in Study 3b2 now reflect their dynamics (as in Study 2b2). This was achieved by changing the
symbols' font size in Study2b2ChordNotator.GetDurationSymbol() using the same formula as in Moritz_58.70 (the last
website Moritz version).(See the same function in StandardChordNotator.cs)

02.09.2011 rev58.42
Implemented the following solution for the (Firefox) @fontface problem (Firefox was not finding CLicht)
by changing Moritz' score writing functions appropriately. Tested (locally) and working for Studies 3b2 and 3b3.:
1. In fontStyleSheet.css, changed the local (smiley) option to point to the local (.woff) font file in the fonts directory. 
1. Moved the fonts folder in the website from "compositions" to the https://www.james-ingram-act-two.de folder (1 folder up).
2. Put fontStyleSheet.css in https://www.james-ingram-act-two.de too.
3. Deleted compositions/fontStyleSheet.css and compositions/study2/fontStyleSheet.css from both local and online sites.
4. Used absolute addressing (https://www.james-ingram-act-two.de/fontsStyleSheet.css) to address the style sheet in all
   the Study 2b2 and 2b3 .svg and .html files.
The scores of Studies 2b2 and 2b3 have been tested and are now working with this scheme both locally and online.

01.09.2011 rev58.41
Completed the Study2b2Notator algorithm (it had been forgotten before the summer break), and used it to create Study 3B2
analogous to Study 2b2. Study 3b3 is analogous to Study 2b3 (=standard chord notation).

01.09.2011 rev58.40
PerformanceOptionsDialog: "Record Live" button renamed to "Perform Live", and disabled when there is no live performer.

18.07.2011 rev58.39
Removed the recording capability from .mpox files and the PerformanceOptionsDialog.
Repositioned the remaining buttons on the dialog.
There may be a problem with performing live. I tried a stress test, and may have succeeded in getting the staves
out of synch...
 
18.07.2011 rev58.38
Study 3b now plays correctly (I think)!  The single event buttons are still working.
Bug Fix: The lower staves were not being played with the correct durations, because the #use definitions were not
being cloned, so the definitions were getting changed...
1. Added two private MidiChordDef.FitToDuration() functions. This ensure that the sum of the 
BasicMidiChord.MsDurations is equal to MidiChordDef.MsDuration. One of these functions is currently used to 
calculate the durations inside the top staff's ornaments before saving them to an SVG-MIDI file.
2. Added a MidiChordDef(midiChordDef, msDuration) constructor. This makes a clone of its first argument
(which is a #use definition) and then calls FitToDuration(msDuration). This is superfluous in Study3b, because
ornament durations dont change anywhere. But they can in future!
Looked at MsPosTimeControlsDict to see if it is capella-specific. No it is not. It is used when performing scores
live, to adjust the assistant's performed durations. The TimeControl holds durations performed live...

15.07.2011 rev58.37
Study 3b now plays through to the end without crashing. The single event buttons are still working.
Bug Fixes:
	1. More rational -> int refactoring, and 
	2. the AssistantPerformer's OutputPin2 is now an int, not a Rational.
Edited the PerformStudy3b patch so that the corresponding output node is an IntNode (not a rationalNode).
NB: Other patches need changing correspondingly, otherwise they will throw exceptions complaining about an
impossible cast.


15.07.2011 rev58.36
Major refactoring: "logical" values are now ints, and have been renamed accordingly (e.g. logicalWidth -> msDuration).

15.07.2011 rev58.34
Bug Fix: MidiScore:GetMidiChannelMoments() now takes account of msPositions in LocalMidiDurationDefs.
The single event buttons now work.
TODO: Performance now throws an exception.

15.07.2011 rev58.33
The durations of rests are now saved in and loaded from SVG-MIDI files.
Moved the call to SetAllMidiDurationDefMsPositions() again. It is now called at the end of SvgScore.LoadSVGScore().
MsPositions are set while composing (and in future when loading a .capx score), but they are not saved in SVG-MIDI
files (or, of course, .capx files).
TODO: The single event buttons in the KrystalPaletteForm do strange things...
The Performance is unstoppable, since it happens in a background thread...
Performance ends with a strange crash (Midi-Command constructed twice)...

14.07.2011 rev58.32
First performance of Study 3b!

14.07.2011 rev58.31
MsPositions have been removed from the saved SVG-MIDI file format.
TODO: Add the old SetAllMidiDurationDefMsPositions(_score.Systems) function to the MidiScore constructor.

14.07.2011 rev58.30
Removed the SetAllMidiDurationDefMsPositions(_score.Systems) function from CompositionAlgorithm.FinalizeAlgorithm().
MsPositions are now set at the point where MidiDurationDefs are inserted in LocalMidiDurationDefs during the
composition algorithm.
TODO: Can I remove MsPositions from MidiDurationDefs altogether? Including MidiChordDefs and BasicMidiChordDefs?

14.07.2011 rev58.29
A Score is now created for Study 3b! Voice now contains a LocalMidiDurationDefs list. LocalisedMidiDurationDefs
have both their msPosition and MsDuration fields set. KrystalPalettes define non-localised MidiDurationDefs having
no MsPosition. LocalMidiDurationDefs are created by composition algorithms or by loading from an SVG-MIDI file.

14.07.2011 rev58.28b
Some minor but important changes. About to set the number of stafflines per staff.

13.07.2011 rev58.28
Minor changes to KrystalPaletteForm. Decided not to add a stop button (too complicated). Reverted RestSymbol.WriteSVG()
to the last website version. (RestSymbols do not have attributes in SVG-MIDI files.)
TODO:
1. Check saving and playing a score! 
2. Check all parameters and their defaults thoroughly. 

13.07.2011 rev58.27
Getting there... About to add a stop button for the KrystalPaletteForms "play all demos" button. Have added
ResetChannels() functions to both the Assistant and PerformanceState. This sends AllSoundsOff and AllControllersOff
commands to all channels.

12.07.2011 rev58.26
The sequence of demo buttons in theKrystalPaletteForm now performs BasicMidiChords and all four Sliders without
crashing (i.e.without running out of BackgroundWorkers). 
TODO: 
	1. Test each parameter, to see that it is working correctly.
	2. Last time I tried saving an SVG-MIDI file, it crashed.

12.07.2011 rev58.25a
Still debugging demo buttons. For some reason the basicChordBackgroundWorkers are still busy when I need them for
a subsequent event...

11.07.2011 rev58.25
First sounds happening. Still needs debugging very carefully. Event #2 crashes...

11.07.2011 rev58.24
Debugging. TODO: Move the Volume control from the main Assistant composer form parallel to PitchWheelDeviation
in the KrystalPaletteForm.

11.07.2011 rev58.23
A few minor improvements.

09.07.2011 rev58.22
Revised the strategy for sending MidiChords in the background:
BasicMidiChords and Sliders are sent in parallel threads. The MidiChord's Volume and PitchWheelDeviation are
sent (if they exist) in the BasicMidiChords thread.
There is a BasicMidiChord thread for each voice in a channel. Each slider type has one thread per channel.

08.07.2011 rev58.21
Successful compile!

08.07.2011 rev58.20t
Completed the MidiChord class. Very simple! TODO: Finish reorganizing threading. Remove the TopVoicesWorker class.

08.07.2011 rev58.20s
Sorted out timing functions between MidiChord and BasicMidiChord. ChordOn and ChordOff no longer log time, so their
Send() functions have been removed. Send ChordOns and ChordOffs by calling the ChordMessageDelegate directly.

08.07.2011 rev58.20r
This version does not yet compile. Still working on MidiScore without CapXML namespace.
Renamed BasicMidiChord -> BasicMidiChordDef, and created a new BasicMidiChord class containing MIDI ChannelMessages.
MidiChords contain a list of BasicMidiChords.

07.07.2011 rev58.20.p
This version does not yet compile. Still working on MidiScore without CapXML namespace.
Many changes - mostly ints instead of longs to measure time positions and durations.
TODO: complete the MidiChord constructor with BasicChords defining ornaments (replacing the old ornaments ctor).

07.07.2011 rev58.20.j
This version does not yet compile. Still working on MidiScore without CapXML namespace.
Moved volume control from staff attribute to Midichorddef attribute (parallel to pitchwheel deviation).
The assistant composer currently only sets this on the first MidiChordDef, but that may change...

06.07.2011 rev58.20.h
This version does not yet compile.
All references to the CapXML namespace have been removed. This version of Moritz knows nothing about
capella. The only class to have been kept from capella is the CapellaColor class, which I have kept with an unchanged
name (for nostalgic reasons). It has been moved into the SVG namespace.
Also, all values which end up as MIDI values in the range 0..127 are now bytes. There are overridden MidiByte()
functions in MoritzStatics.cs for creating these bytes from ints and doubles.
Also, I have removed the MidiOrnament class...
TODO:
1. Revise the MidiScore class, using SvgScore Voice.MidiDurationDefs to create Moments containing just MidiChords.
2. Use MidiChordDefs to create MidiChords containing possibly more than one BasicChord.
3. Send MidiChords using the old ornamentBackground workers.

06.07.2011 rev58.20e
All MidiControls now only use one byte (the MSB). This is a major step. VisualStudio is only finding errors in
files specialized for capella. I am considering discontinuing support for capella. It would be supported only by
earlier versions of Moritz...

05.07.2011 rev58.20d
Have written
1. the Study2b2ChordNotator parallel to the StandardChordNotator used in Study 2b3.
2. the PaletteDemoScore and PaletteDemoAlgorithm for use when playing demo sounds in the AssistantComposer's
KrystalPalettes.
Am now embarking on a correction of the MidiControl constructors. These should never accept percentage arguments!!
And there should always be a constructor which accepts an Msb parameter.

04.07.2011 rev58.20c
Drastic refactoring of Assistant Composer Code:
1. The score composing algorithm is now isolated in a class deriving from CompositionAlgorithm. As an example,
Study2bAlgorithm now contains the algorithm for both Study2b2 and 2b3 (not exactly, of course since the palettes
have changed).
2. Created a StandardChordNotator class (deriving from Notator), containing the code for creating standard chords
from the MidiDurationDefs inside scores which have been created by a CompositionAlgorithm.
3. Study2b3.cs rewritten showing how these classes are used.
This revision does not yet compile, because Study2b2 needs to completed in parallel to Study 2b3 (create a 
Study2b2ChordNotator...)
TODO: rewrite Study2b2 in parallel to Study2b3.

03.07.2011 rev58.20
Saved SVG-MIDI files now load in IE9.
TODO:
1. Move MidiChordDef analysis to SvgScore.
2. look at the SVG-MIDI code to see that it is as expected:
	id="staff1_1chord"
    hasChordOff="0"
    pitchWheelDeviation
and contain the following container hierarchy:
				score:midiChord
				{
					score:basicChords (compulsory - has at least one score:basicChord)
					{
						List of score:basicChord
					}
					score:sliders (optional)
				}
  score:midiChord corresponds to a MidiChordDef object in C#,
  score:basicChord corresponds to a BasicMidiChord object in C#,
  score:sliders corresponds to a MidiSliders object in C#

02.07.2011 rev58.19
Completed testing the Assistant Composer's dialogs, including saving and loading .mkss files.
TODO: Debug saving of SVG-MIDI scores in the new format. (See rev58.15b below)

02.07.2011 rev58.18
Moved as much functionality as possible into the BasicChordControl.
Debugged the OrnamentsPalette.

01.07.2011 rev58.17
Completed the functionality of the Assistant Composer. This version compiles, but has not yet been tested.

29.06.2011 rev58.16
Completed the integration of the BasicChordControl into the OrnamentSettingsForm:
Moved both the bank/patch field functionality and the chord field functionality (density, root inversion, inversion
number and VerticalVelocityFactor) into BasicChordControl from OrnamentSettingsForm.

28.06.2011 rev58.15c
Integrating the BasicChordControl into the OrnamentSettingsForm. Nearly done.
OrnamentSettingsForm labels checked to see that they correctly indicate whether the field is optional.
OrnamentSettingsForm documentation on the form. A few minor improvements.

28.06.2011 rev58.15b
Not yet complete, but changing the SVG format (again) for score:midiChord to have the following attributes:
	id="staff1_1chord"
    hasChordOff="0"
    pitchWheelDeviation
and contain the following container hierarchy:
				score:midiChord
				{
					score:basicChords (compulsory - has at least one score:basicChord)
					{
						List of score:basicChord
					}
					score:sliders (optional)
				}
  score:midiChord corresponds to a MidiChordDef object in C#,
  score:basicChord corresponds to a BasicMidiChord object in C#,
  score:sliders corresponds to a MidiSliders object in C#
If the midiChord has just one score:basicChord in the list, it is not an "ornament".
In 15b, I have created a new BasicChordControl and integrated it into the KystalPaletteForm.

26.06.2011 rev58.15
Changed the SVG format. Removed the score:ornament class altogether. An ornament is just a chord containing ornamentChords.
The "score" namespace now has the following container hierarchy for chord midi info:
				score:midiChord
				{
					score:basicChord
					score:sliders (optional)
					score:ornamentChords (optional)
					{
						List of score:basicChord
					}
				}
  score:midiChord corresponds to a MidiChordDef object in C#,
  score:basicChord corresponds to a BasicMidiChord object in C#,
  score:sliders corresponds to a MidiSliders object in C#,
  score:ornamentChords corresponds to a list of BasicMidiChords in C#.
The old C# MidiOrnamentsDef object is now just a local variable used while constructing MidiChordDef objects.
MidiOrnamentsDef could actually be a replaced by a private function in MidiChordDef, returning a list of BasicMidiChords. 
This is now working for the Assistant Composer. Now go through the Assistant Performer, tidying up the code.
Would be nice to get rid of the MidiOrnament class too!

24.06.2011 rev58.14
Bug Fixes: Testing with Study 2b1.capx.
1. Added VerticalVelocityFactor to the slider types in TopVoiceWorker_DoWork().
   VerticalVelocityFactor is only a dummy MidiSlider, and does nothing here.
2. ChordSlider class is now abstract, and its constructor passes its first arg to the base class.

24.06.2011 rev58.13
Added a "save settings" button to the Assistant Composer.
The palette event-test buttons are producing sound, but the envelopes are not yet implemented.

22.06.2011 rev58.12
ACHTUNG: This version compiles, and the KrystalPaletteForm and OrnamentForms both load and save correctly (tested with a manually
edited Study 3b)BUT THEIR FUNCTIONALITY MUST STILL BE FINALIZED.
The code for Studies 2b2 and 2b3 has been quickly edited so that everything still compiles. The original versions
of these pieces will have to be performed by an older version of Moritz. I am not going to change the
online formats of these pieces.
There has been a complete reorganization of the KrystalPaletteForm and OrnamentForm.
In the KrystalPaletteForm:
	1. there is a pitchwheel deviation value for each event (not just one for the whole palette).
	2. pitchwheel, pan and modulationWheel settings are now _envelopes_, not just single values per event. These
	   controls are going to change continuously per event (chord or ornament).
	3. New code for bank/patch values
In the OrnamentForm:
	1. removed pitchwheel deviation field, relative pitchwheel and relative pan settings
	2. New code for bank/patch values
   

22.06.2011 rev58.11
Removed the channel slider lock objects from Performance State. Locks are now created on the corresponding
backgroundWorkers. Tested and working on Studies 2b and 3a.
 
17.06.2011 rev58.10
Added individual channel backgroundWorkers and corresponding lock objects to
PerformanceState for each of the following slider types:
	Volume
	Expression
	ModulationWheel
	Pan
	Pitchwheel
One of each of these sliders can now work on the same channel at the same time.
Changed the use of Balance control to Pan in AssistantPerformerNode/capella init.
Solved a bug in PerformanceOptionsDialog constructor: If the MoritzPerformanceOptions file does not exist, a new one
is created. It is now saved immediately, so that the number of MoritzPlayers can be retrieved by the AssistantPerformer.
Test file: MidiSliderTest3.capx.

------------------------

15.06.2011 rev58.09
Part3: Removed the fields for minimum ornament chord duration that I put in the OrnamentSettingsForm yesterday.
Decided to leave the Global Option for minimum ornament chord duration in the PerformanceOptions dialog. But edited
the comment there. That option can globally raise the threshold for the minimum ornament chord duration.
 
15.06.2011 rev58.08
Part2: Ornaments are now constructed with individual settings for minimum ornament chord duration.

15.06.2011 rev58.07
Decided to set the minimum ornament chord duration _per_ornament_ rather than per palette, so:
Part1: Added the MinMsDurations fields to the KrystalPaletteForm parallel to the other ornament related fields.
The text box and help labels are integrated into the dialog's usual functionality. Values in the text box are saved
and reloaded correctly.

14.06.2011 rev58.06
Ornaments are now constructed according to a new minimum millisecond duration field in the OrnamentSettingsForm.
The corresponding Performance Option has not yet been removed.

14.06.2011 rev58.05
Beginning to move the Minimum Ornament Chord Duration option from Performance Options to AssistantComposer.
Part 1: Added the MinMsDurationTextBox to the OrnamentSettingsForm. The text box is integrated into the dialog's usual
functionality, reacting sensibly to bad input and saving and retrieving its value from the .mkss file.

11.06.2011 rev58.04
KrystalPaletteForm: "play all in sequence" and all single event buttons now work.
Made a copy of Study 2b3 ( --> Study 3b ) for use in testing.
NOTE: During this revision, I created the specialised PaletteDemoScore type, and made a few changes to SvgScore.cs.
Have checked that Studies 2b2 and 2b3 are still working correctly.

10.06.2011 rev58.03
KrystalPaletteForm: Added and tested "play all in sequence" button.

9.06.2011 rev58.02
KrystalPaletteForm: "further help" and "MIDI Instruments" help windows completed.
Created event-demo buttons dynamically, so that there are as many buttons as there are event types in the palette.
Created corresponding event handler for the buttons -- as far as the function PlayEvent(eventIndex).
 
9.06.2011 rev58.01
KrystalPaletteForm: Added stub event-demo buttons (to be removed later) and moved help texts to "further help" Window.

